// You can use @snaplet/copycat to generate fake data for a field, for example:
// ```
// await snaplet.users([{ email: ({ seed }) => copycat.email(seed) }])
// ```
// More on this in our docs: https://docs.snaplet.dev/core-concepts/seed#inside-the-snapletseed-workflow
import { copycat } from "@snaplet/copycat";
import { SnapletClient } from "@snaplet/seed";

// throwing
// SyntaxError: The requested module './packages/features/auth/lib/hashPassword.ts' does not provide an export named 'hashPassword'
// todo: fix this
// import { hashPassword } from './packages/features/auth/lib/hashPassword.ts'

// This is a basic example generated by Snaplet to start you off, check out the docs for where to go from here
// * For more on getting started with @snaplet/seed: https://docs.snaplet.dev/getting-started/quick-start/seed
// * For a more detailed reference: https://docs.snaplet.dev/core-concepts/seed

// fingerprint mode will work so nice for bookings, where I want the create
// date from this value to the other.

const seed = new SnapletClient({
  // dryRun: process.env.DRY !== '0',
  dryRun: false,
  models: {
    users: {
      data: {
        locale: "en",
        // for every user create the email address based on the username
        email: ({ data }) => `${data.email}@example.com`,
        // comply with admin password requirement.
        password: ({ data, seed }) => data.role === "ADMIN" ? "ADMINadmin2022!" : copycat.password(seed),
      },
    },
  },
});

// Clears all existing data in the database, but keep the structure
await seed.$resetDatabase();

/** SCRIPT */
type UserToCreateSchema = Array<{
  username: string;
  name: string;
  completedOnboarding?: boolean;
  eventTypeCount?: number;
  timeZone?: "America/Phoenix",
  role?: string
}>;

const usersToCreate: UserToCreateSchema = [
  { username: "delete-me", name: "Delete me" },
  { username: "onboarding", name: "Onboarding", completedOnboarding: false },
  { username: "free-first-hidden", name: "Free Example", completedOnboarding: false, eventTypeCount: 2 },
  { username: "trial", name: "Trial Example" },
  { username: "usa", name: "USA Timezone Example", timeZone: "America/Phoenix", eventTypeCount: 1 },
  { username: "admin", name: "Admin Example", role: "ADMIN" }
];

// create general tier users
await seed.users(
  usersToCreate.map((u) => ({
    username: u.username,
    name: u.username,
    timeZone: u.timeZone,
    // create email based on username
    email: ({ data }) => `${data.email}@example.com`,
    // only create a schedule if the user has completed onboarding
    Schedule: u.completedOnboarding
      ? [{ name: "Working Hours", Availability: (x) => x({ min: 1, max: 5 }) }]
      : undefined,
    EventType:
      u.eventTypeCount === undefined
        ? undefined
        : (x) => x(u.eventTypeCount as number, () => ({ Booking: (count) => count({ min: 0, max: 5 }) })),
  }))
);

// create pro tier users
await seed.users([
  {
    name: "Pro Example",
    username: "pro",
    completedOnboarding: true,
    // simulate busy user
    EventType: (x) =>
      x(10, (seed) => ({
        length: copycat.int(seed, { min: 30 }),
        Booking: (count) => count({ min: 30, max: 100 }),
      })),
  },
]);

// todo: create the teams and connect them to the users

// create team accounts
await seed.users((count) => [
  { name: "Team Free Example", username: "teamfree", completedOnboarding: true },
  ...count(4, (idx) => ({ name: `Team Pro Example ${idx + 1}`, username: `teampro${idx + 1}`, completedOnboarding: true }))
])

// get the store of all the users, and console.log the usernames with their passwords.
